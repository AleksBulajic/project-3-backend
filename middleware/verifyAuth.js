import jwt from "jsonwebtoken";
import * as dotenv from "dotenv";

dotenv.config();
// This key is set by us to verify on the server, that the token generated by this server
// is being used to make the request
const secretKey = process.env.SECRET_KEY;
console.log(`Secret key: ${secretKey}`);

export default function verifyAuth(req, res, next) {
  // extract token from headers
    let token = req.headers.authorization;
      console.log(`FROM verifyAuth: TOKEN: ${token}`)
    if (!token) {
      return res.status(401).json({
        status: 401,
        message: "You must signin first.",
      });
    }
    try{
    // verify token and extra the user's info
    const data = jwt.verify(token, secretKey);
      console.log(`FROM verifyAuth jwt.verify ${data}:`)
      console.log(`verifyAuth JSON sringified Verified token: ${JSON.stringify(data)}`);
    // if token is expired send 401 (in the front end make sure the user is re-routed)
    //sends the id needed for the rest of the request, down to the controller
      req.id = data.id;
      console.log(`verifyAuth req.id: ${req.id}`);
      console.log(`verifyAuth data: ${data}`)
    // next() is an express way of calling the next function in the middleware path
  }catch(err){
    console.log(`verifyAuth ERROR: ${err}`);
  }
  next();
  // If token doesn't exist, we can return an error
}
